Index: app/src/main/java/com/team3/wellness_buddy/register/SignUpForm.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.team3.wellness_buddy.register\n\nimport android.util.Log\nimport android.widget.Toast\nimport androidx.compose.runtime.Composable\n\n\nimport androidx.compose.foundation.layout.*\n\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.verticalScroll\n\n\nimport androidx.compose.material.*\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.ExperimentalComposeUiApi\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\n\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.DialogProperties\nimport androidx.navigation.NavController\nimport com.google.firebase.database.DataSnapshot\nimport com.google.firebase.database.DatabaseError\nimport com.google.firebase.database.DatabaseReference\nimport com.google.firebase.database.FirebaseDatabase\nimport com.google.firebase.database.ValueEventListener\nimport com.team3.wellness_buddy.R\nimport com.team3.wellness_buddy.helpers.getWindowToolBarHeight\nimport com.team3.wellness_buddy.ui.theme.Custom_Colors\n\nimport com.google.firebase.database.ktx.database\nimport com.google.firebase.ktx.Firebase\nimport com.team3.wellness_buddy.helpers.IconText\nimport java.security.MessageDigest\n@OptIn(ExperimentalComposeUiApi::class)\n@Composable\nfun SignUpForm(\n    paddingValues: PaddingValues,\n    navController: NavController,\n    onSaveUserInfo: (String, String, String) -> Unit\n\n) {\n\n    lateinit var firebaseRef : DatabaseReference\n    firebaseRef = FirebaseDatabase.getInstance().getReference(\"users\")\n    val coroutineScope = rememberCoroutineScope()\n    var firstName by remember { mutableStateOf(\"\") }\n    var lastName by remember { mutableStateOf(\"\") }\n    val genders = listOf(\"Male\", \"Female\", \"Others\")\n    var gender by remember { mutableStateOf(\"\") }\n    var age by remember { mutableStateOf(\"\") }\n    var email by remember { mutableStateOf(\"\") }\n    var password by remember { mutableStateOf(\"\") }\n    var confirmPassword by remember { mutableStateOf(\"\") }\n\n    var bio by remember {\n        mutableStateOf(\"\")\n    }\n    var street by remember {\n        mutableStateOf(\"\")\n    }\n    var city by remember {\n        mutableStateOf(\"\")\n    }\n    var zipCode by remember {\n        mutableStateOf(\"\")\n    }\n    var state by remember {\n        mutableStateOf(\"\")\n    }\n    var country by remember {\n        mutableStateOf(\"\")\n    }\n    val dialogMessage = remember { mutableStateOf(\"\") }\n    val openDialog = remember { mutableStateOf(false) }\n\n    Column(\n        modifier = Modifier\n            .padding(paddingValues)\n//            .padding(\n//                top = getWindowStatusBarHeight(),\n//                bottom = getWindowToolBarHeight() + 10.dp\n//            )\n            .padding(horizontal = 10.dp)\n            .imePadding()\n            .fillMaxWidth()\n            .verticalScroll(\n                rememberScrollState()\n            )\n\n    ) {\n\n        Spacer(modifier = Modifier.height(10.dp))\n\n        //personal Info\n        IconText(\n            modifier = Modifier,\n            iconImage = R.raw.describe,\n            iconText = \"personal Info\",\n            text = \"Personal Info\"\n        )\n        Spacer(modifier = Modifier.height(6.dp))\n        Row(\n            modifier = Modifier.fillMaxWidth(),\n            horizontalArrangement = Arrangement.SpaceBetween\n        ) {\n            MyTextField(\n                modifier = Modifier.weight(1.5f),\n                label = \"First Name\",\n                value = firstName,\n                onValueChange = { firstName = it },\n                iconImage = R.raw.name,\n                isIconAvailable = true\n                )\n            Spacer(modifier = Modifier.width(10.dp))\n            MyTextField(\n                modifier = Modifier.weight(1f),\n                label = \"Last Name\",\n                value = lastName,\n                onValueChange = { lastName = it },\n\n                )\n        }\n        Spacer(modifier = Modifier.height(16.dp))\n        // Add more rows for gender, email, bio, address, checkboxes, etc.\n        // Example:\n        Row(\n            modifier = Modifier.fillMaxWidth(),\n            horizontalArrangement = Arrangement.SpaceBetween\n        ) {\n\n            DropDownTextField(\n                modifier = Modifier\n                    .weight(1.1f),\n                label = \"Gender\",\n                value = gender,\n                menuItems = genders,\n                onValueChange = { gender = it },\n                iconImage = R.raw.gender,\n            )\n            Spacer(modifier = Modifier.width(10.dp))\n            MyTextField(\n                modifier = Modifier\n                .weight(1f), label = \"Age\", value = age, onValueChange = { age = it },\n                iconImage = R.raw.age,\n                isIconAvailable = true)\n        }\n        Spacer(modifier = Modifier.height(16.dp))\n        MyTextField(\n            modifier = Modifier\n            .fillMaxWidth(),\n            label = \"Email@example.com\",\n            value = email,\n            onValueChange = { email = it },\n            iconImage = R.raw.email,\n            isIconAvailable = true)\n        Spacer(modifier = Modifier.height(16.dp))\n        Row(\n            modifier = Modifier.fillMaxWidth(),\n            horizontalArrangement = Arrangement.SpaceBetween\n        ) {\n            MyTextField(\n                modifier = Modifier.weight(1.5f),\n                label = \"Password\",\n                value = password,\n                onValueChange = { password = it },\n            )\n            Spacer(modifier = Modifier.width(10.dp))\n            MyTextField(\n                modifier = Modifier.weight(1f),\n                label = \"Confirm Password\",\n                value = confirmPassword,\n                onValueChange = { confirmPassword = it },\n            )\n        }\n        Spacer(modifier = Modifier.height(16.dp))\n        MyTextField(\n            modifier = Modifier\n                .fillMaxWidth()\n                .height(200.dp)\n                .verticalScroll(rememberScrollState()),\n            label = \"Describe Your Self\",\n            value = bio,\n            onValueChange = { bio = it },\n            )\n        Spacer(modifier = Modifier.height(16.dp))\n\n//Address\n        IconText(\n            modifier = Modifier,\n            iconImage = R.raw.address,\n            iconText = \"address\",\n            text = \"Address\"\n        )\n        Spacer(modifier = Modifier.height(6.dp))\n\n        Row(\n            modifier = Modifier.fillMaxWidth(),\n            horizontalArrangement = Arrangement.SpaceBetween\n        )\n        {\n            MyTextField(\n                modifier = Modifier.weight(1f),\n                label = \"City\",\n                value = city,\n                onValueChange = { city = it },\n                )\n            Spacer(modifier = Modifier.width(16.dp))\n            MyTextField(\n                modifier = Modifier.weight(2f),\n                label = \"Street\",\n                value = street,\n                onValueChange = { street = it })\n        }\n\n        Spacer(modifier = Modifier.height(16.dp))\n\n        Row(\n            modifier = Modifier.fillMaxWidth(),\n            horizontalArrangement = Arrangement.SpaceBetween\n        )\n        {\n            MyTextField(\n                modifier = Modifier.weight(1f),\n                label = \"Zip Code\",\n                value = zipCode,\n                onValueChange = { zipCode = it })\n            Spacer(modifier = Modifier.width(16.dp))\n            MyTextField(\n                modifier = Modifier.weight(1f),\n                label = \"State\",\n                value = state,\n                onValueChange = { state = it })\n        }\n        Spacer(modifier = Modifier.height(16.dp))\n        Row(\n            modifier = Modifier.fillMaxWidth(),\n            horizontalArrangement = Arrangement.SpaceBetween\n        )\n        {\n            MyTextField(\n                modifier = Modifier.fillMaxWidth(),\n                label = \"Country\",\n                value = country,\n                onValueChange = { country = it })\n\n        }\n\n        Spacer(modifier = Modifier.height(16.dp))\n        // Add checkboxes\n        // Example:\n        var seekerChecked by remember {\n            mutableStateOf(false)\n        }\n\n\n\n\n        var checkboxes by remember { mutableStateOf(listOf<CheckboxState>()) }\n        var coachChecked by remember { mutableStateOf(false) }\n\n        // Add checkboxes dynamically\n        if (checkboxes.isEmpty()) {\n            checkboxes = listOf(\n                CheckboxState(\"Seeker\"),\n                CheckboxState(\"Coach\")\n            )\n        }\n\n        Row(modifier=Modifier.fillMaxWidth()) {\n            checkboxes.forEachIndexed { index, checkboxState ->\n                MyCheckBox(\n                    text = checkboxState.text,\n                    checked = checkboxState.checked,\n                    onCheckedChange = { isChecked ->\n                        // Update the state of the clicked checkbox\n                        checkboxes = checkboxes.mapIndexed { i, state ->\n                            if (index == i) CheckboxState(state.text, isChecked)\n                            else CheckboxState(state.text, false)\n                        }\n\n                        // If \"Coach\" checkbox is checked, set coachChecked to true\n                        if (checkboxState.text == \"Coach\") {\n                            coachChecked = isChecked\n                        }else if(checkboxState.text == \"Seeker\"){\n                            if (isChecked) {\n                                coachChecked = false\n                                seekerChecked = isChecked\n                            }\n                        }\n                    }\n                )\n                Spacer(modifier = Modifier.height(16.dp))\n            }\n\n            // Show the column if \"Coach\" checkbox is checked\n\n        }\n\n        var category by remember {\n            mutableStateOf(\"\")\n        }\n        var category_list= listOf(\"Psychiatrist\",\"Dermatologist\",\"Nutrient\")\n\n        var level by remember {\n            mutableStateOf(\"\")\n        }\n        var level_list= listOf(\"Expert\",\"Student\")\n\n        if (coachChecked ) {\n\n            Column(\n                modifier = Modifier.padding(bottom = getWindowToolBarHeight()+80.dp)\n\n            ) {\n                Spacer(modifier = Modifier.height(16.dp))\n                Text(\"Choose your Category: \")\n                Spacer(modifier = Modifier.height(16.dp))\n                DropDownTextField(\n                    modifier = Modifier,\n                    label = \"Category\",\n                    value = category,\n                    menuItems = category_list,\n                    onValueChange = {category=it},\n                    iconImage = R.raw.question\n                )\n                Spacer(modifier = Modifier.height(16.dp))\n                DropDownTextField(\n                    modifier = Modifier,\n                    label = \"Level\",\n                    value = level,\n                    menuItems = level_list,\n                    onValueChange = {level=it}\n                )\n                // Add more content here as needed\n            }\n        }\n\n//        Spacer(modifier = Modifier.height(16.dp))\n\n\n        fun validateInput(): Boolean {\n            return when {\n                firstName.isEmpty() -> {\n                    dialogMessage.value = \"Please enter First Name\"\n                    openDialog.value = true\n                    false\n                }\n                lastName.isEmpty() -> {\n                    dialogMessage.value = \"Please enter Last Name\"\n                    openDialog.value = true\n                    false\n                }\n                gender.isEmpty() -> {\n                    dialogMessage.value = \"Please select Gender\"\n                    openDialog.value = true\n                    false\n                }\n                password.isEmpty() -> {\n                    dialogMessage.value = \"Please enter Password\"\n                    openDialog.value = true\n                    false\n                }\n                confirmPassword.isEmpty() -> {\n                    dialogMessage.value = \"Please enter Confirm Password\"\n                    openDialog.value = true\n                    false\n                }\n                password != confirmPassword -> {\n                    dialogMessage.value = \"Passwords do not match\"\n                    openDialog.value = true\n                    false\n                }\n                age.isEmpty() -> {\n                    dialogMessage.value = \"Please enter Age\"\n                    openDialog.value = true\n                    false\n                }\n                email.isEmpty() -> {\n                    dialogMessage.value = \"Please enter Email\"\n                    openDialog.value = true\n                    false\n                }\n                bio.isEmpty() -> {\n                    dialogMessage.value = \"Please enter Bio\"\n                    openDialog.value = true\n                    false\n                }\n                street.isEmpty() -> {\n                    dialogMessage.value = \"Please enter Street\"\n                    openDialog.value = true\n                    false\n                }\n                city.isEmpty() -> {\n                    dialogMessage.value = \"Please enter City\"\n                    openDialog.value = true\n                    false\n                }\n                zipCode.isEmpty() -> {\n                    dialogMessage.value = \"Please enter Zip Code\"\n                    openDialog.value = true\n                    false\n                }\n                state.isEmpty() -> {\n                    dialogMessage.value = \"Please enter State\"\n                    openDialog.value = true\n                    false\n                }\n                country.isEmpty() -> {\n                    dialogMessage.value = \"Please enter Country\"\n                    openDialog.value = true\n                    false\n                }\n                else -> true\n            }\n        }\n\n        Row(\n            modifier= Modifier\n                .fillMaxWidth()\n                .height(80.dp),\n                    horizontalArrangement = Arrangement.Center\n\n            ) {\n            Button(onClick = {\n                if (validateInput()) {\n                    val hashedPassword = hashString(password)\n                    Log.d(\"HashedPassword\",hashedPassword)\n                    val user = User(\n                        firstName,\n                        lastName,\n                        gender,\n                        age,\n                        email,\n                        hashedPassword,\n                        bio,\n                        street,\n                        city,\n                        zipCode,\n                        state,\n                        country,\n                        if (seekerChecked) \"Seeker\" else if (coachChecked) \"Coach\" else \"\",\n                        level,\n                        category\n                    )\n                    // Print user details before storing to Firebase\n                    Log.d(\"SignUpForm\", user.toString())\n                    var userId = firebaseRef.push().key!!\n                    firebaseRef.orderByChild(\"email\").equalTo(email).addListenerForSingleValueEvent (\n                        object : ValueEventListener {\n                            override fun onDataChange(snapshot: DataSnapshot) {\n                                if (snapshot.exists()) {\n                                    // Email already exists\n                                    dialogMessage.value = \"Email already exists!\"\n                                    openDialog.value = true\n                                } else {\n                                    // Email does not exist, save the new user data\n                                    firebaseRef.push().setValue(user).addOnSuccessListener {\n                                        onSaveUserInfo(firstName, lastName, email)\n                                        navController.navigate(\"home\")\n                                    }\n                                        .addOnFailureListener {\n                                            dialogMessage.value = \"Error: ${it.message}\"\n                                            openDialog.value = true\n                                        }\n                                }\n                            }\n\n                            override fun onCancelled(error: DatabaseError) {\n                                dialogMessage.value = \"Error: ${error.message}\"\n                                openDialog.value = true\n                            }\n                        }\n                    )\n                }\n\n            },\n                modifier = Modifier.fillMaxWidth(0.5f)\n                    .height(100.dp/2)\n                    .width(100.dp),\n                shape = RoundedCornerShape(50),\n                colors = ButtonDefaults.buttonColors(Custom_Colors.Primary_bg)\n                    ) {\n                Text(text = \"Submit\",\n                   color = Color.White)\n            }\n\n        }\n        if (openDialog.value) {\n            AlertDialog(\n                onDismissRequest = { openDialog.value = false },\n                title = { Text(text = \"Validation Error\") },\n                text = { Text(text = dialogMessage.value) },\n                confirmButton = {\n                    TextButton(onClick = { openDialog.value = false }) {\n                        Text(\"OK\")\n                    }\n                }\n            )\n        }\n\n    }\n}\n\nprivate fun hashString(input: String): String {\n    val HEX_CHARS = \"0123456789ABCDEF\"\n    val bytes = MessageDigest\n        .getInstance(\"SHA-256\")\n        .digest(input.toByteArray())\n    val result = StringBuilder(bytes.size * 2)\n\n    bytes.forEach {\n        val i = it.toInt() and 0xff\n        result.append(HEX_CHARS[i shr 4])\n        result.append(HEX_CHARS[i and 0x0f])\n    }\n\n    return result.toString()\n}\n\ndata class User(\n    val firstName: String,\n    val lastName: String,\n    val gender: String,\n    val age: String,\n    val email: String,\n    val hashedPassword: String,\n    val bio: String,\n    val street: String,\n    val city: String,\n    val zipCode: String,\n    val state: String,\n    val country: String,\n    val role: String,\n    val level: String?,\n    val category:String?\n)\n\ndata class CheckboxState(val text: String, val checked: Boolean = false)\n\n@Composable\nfun MyCheckBox(text: String, checked: Boolean, onCheckedChange: (Boolean) -> Unit) {\n\n    Row(verticalAlignment = Alignment.CenterVertically) {\n        Checkbox(checked = checked, onCheckedChange = onCheckedChange)\n        Text(text)\n    }\n}\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/team3/wellness_buddy/register/SignUpForm.kt b/app/src/main/java/com/team3/wellness_buddy/register/SignUpForm.kt
--- a/app/src/main/java/com/team3/wellness_buddy/register/SignUpForm.kt	
+++ b/app/src/main/java/com/team3/wellness_buddy/register/SignUpForm.kt	
@@ -452,7 +452,7 @@
                     )
                     // Print user details before storing to Firebase
                     Log.d("SignUpForm", user.toString())
-                    var userId = firebaseRef.push().key!!
+
                     firebaseRef.orderByChild("email").equalTo(email).addListenerForSingleValueEvent (
                         object : ValueEventListener {
                             override fun onDataChange(snapshot: DataSnapshot) {
