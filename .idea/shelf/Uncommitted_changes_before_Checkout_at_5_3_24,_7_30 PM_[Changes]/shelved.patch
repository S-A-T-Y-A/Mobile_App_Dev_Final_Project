Index: app/src/main/java/com/team3/wellness_buddy/usersList/UsersListPage.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.team3.wellness_buddy.usersList\n\n\nimport User\n\nimport android.annotation.SuppressLint\nimport android.util.Log\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\n\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxSize\n\n\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\n\nimport androidx.compose.material.CircularProgressIndicator\nimport androidx.compose.material.DropdownMenu\nimport androidx.compose.material.DropdownMenuItem\nimport androidx.compose.material.FabPosition\nimport androidx.compose.material.FloatingActionButton\nimport androidx.compose.material.FloatingActionButtonDefaults\nimport androidx.compose.material.Icon\nimport androidx.compose.material.IconButton\nimport androidx.compose.material.Scaffold\nimport androidx.compose.material.Text\nimport androidx.compose.material.TopAppBar\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Menu\n\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\n\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.unit.dp\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport com.team3.wellness_buddy.R\nimport com.team3.wellness_buddy.helpers.getWindowStatusBarHeight\nimport com.team3.wellness_buddy.helpers.getWindowToolBarHeight\nimport com.team3.wellness_buddy.ui.theme.Custom_Colors\nimport kotlinx.coroutines.launch\nimport androidx.navigation.NavController\nimport com.google.firebase.database.DataSnapshot\nimport com.google.firebase.database.DatabaseError\nimport com.google.firebase.database.FirebaseDatabase\nimport com.google.firebase.database.ValueEventListener\nimport com.team3.wellness_buddy.UserPreferences\n\n\n\n@SuppressLint(\"SuspiciousIndentation\", \"ResourceType\")\n\n@Composable\nfun UsersListPage(navController: NavController){\n    val coroutineScope = rememberCoroutineScope()\n    val context= LocalContext.current\n    val categories = listOf(\"ENT Specialist\", \"Orthopedic Specialist\", \"Gastroenterologist\", \"Dermatologist\", \"Neurologist\", \"Psychiatrist\")\n    val ages = listOf(\"<25\", \"<35\", \"<=45\", \">=45\")\n    val _userList = MutableLiveData<List<User>>()\n    var selectedCategory by remember { mutableStateOf(categories[0]) }\n    var selectedAge by remember { mutableStateOf(ages[0]) }\n    var isDataLoaded by remember { mutableStateOf(false) } // Track whether data is loaded\n\n    fun fetchUserList() {\n        val firebaseRef = FirebaseDatabase.getInstance().getReference(\"users\")\n        firebaseRef.addListenerForSingleValueEvent(object : ValueEventListener {\n            override fun onDataChange(snapshot: DataSnapshot) {\n                val userList = mutableListOf<User>()\n                for (userSnapshot in snapshot.children) {\n                    val user = userSnapshot.getValue(User::class.java)\n                    user?.let {\n                        userList.add(it)\n                    }\n                }\n                Log.d(\"UserList\",userList.toString())\n                _userList.value = userList\n                isDataLoaded = true\n            }\n\n            override fun onCancelled(error: DatabaseError) {\n                // Handle error\n            }\n        })\n    }\n    LaunchedEffect(true) {\n        fetchUserList()\n    }\n\n\n    @Composable\n    fun FilterRow(\n        categories: List<String>,\n        ages: List<String>\n\n    ) {\n\n        Row {\n            // Category dropdown\n            DropdownMenu(\n                expanded = false,\n                onDismissRequest = { /* Dismiss dropdown on outside click */ }\n            ) {\n                categories.forEach { category ->\n                    DropdownMenuItem(onClick = {\n                        selectedCategory = category\n                    }) {\n                        Text(text = category)\n                    }\n                }\n            }\n\n            // Age dropdown\n            DropdownMenu(\n                expanded = false,\n                onDismissRequest = { /* Dismiss dropdown on outside click */ }\n            ) {\n                ages.forEach { age ->\n                    DropdownMenuItem(onClick = {\n                        selectedAge = age\n                    }) {\n                        Text(text = age)\n                    }\n                }\n            }\n        }\n    }\n\n\n    Scaffold(\n        modifier = Modifier\n            .padding(\n                top = getWindowStatusBarHeight(),\n                bottom = getWindowToolBarHeight() + 10.dp\n            ),\n\n        topBar = {\n            TopAppBar(\n                {\n                    Box(\n                        modifier = Modifier\n                            .background(Color.Transparent)\n                    ) {\n                        val firstName = UserPreferences.getFirstName(context)\n                        val lastName = UserPreferences.getLastName(context)\n\n                        val displayName = if (firstName.isNullOrBlank() && lastName.isNullOrBlank()) {\n                            \"Wellness Buddy\"\n                        } else {\n                            \"${firstName.orEmpty()} ${lastName.orEmpty()}\"\n                        }\n\n                        Text(text = displayName)\n                    }\n                },\n                backgroundColor = Custom_Colors.Primary_bg,\n                contentColor = Color.White,\n                actions = {\n                    IconButton(onClick = { /* Handle left icon click */ }) {\n                        Icon(\n                            Icons.Filled.Menu,\n                            contentDescription = \"Menu\",\n                            tint = Color.White\n                        )\n                    }\n                },\n\n\n                )\n        },\n\n        floatingActionButton = {\n\n            FloatingActionButton(\n                onClick = {\n                    coroutineScope.launch {\n                        navController.navigate(\"login\")\n                    }\n                },\n                modifier = Modifier\n                    .size(50.dp),\n                backgroundColor = Color.Black, // Set your desired FAB background color // Set your desired FAB content color\n                elevation = FloatingActionButtonDefaults.elevation(defaultElevation = 8.dp),\n            ) {\n\n                Image(\n                    modifier = Modifier.fillMaxSize(),\n                    painter = painterResource(id = R.raw.user), contentDescription =\"user\" )\n            }\n        },\n        floatingActionButtonPosition = FabPosition.Center,\n\n        ) { innerPadding ->\n        FilterRow(categories, ages)\n        Log.d(\"UserList1\",_userList.toString())\n\n        if (!isDataLoaded) {\n            Log.d(\"UserList1\",_userList.toString())\n\n            Box(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .padding(innerPadding),\n                contentAlignment = Alignment.Center\n            ) {\n                CircularProgressIndicator()\n            }\n        } else {\n            _userList.value?.let { userList ->\n                UserListContent(userList = userList, paddingValues = innerPadding)\n            }\n        }\n    }}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/team3/wellness_buddy/usersList/UsersListPage.kt b/app/src/main/java/com/team3/wellness_buddy/usersList/UsersListPage.kt
--- a/app/src/main/java/com/team3/wellness_buddy/usersList/UsersListPage.kt	
+++ b/app/src/main/java/com/team3/wellness_buddy/usersList/UsersListPage.kt	
@@ -1,16 +1,19 @@
 package com.team3.wellness_buddy.usersList
 
 
-import User
 
 import android.annotation.SuppressLint
 import android.util.Log
 import androidx.compose.foundation.Image
 import androidx.compose.foundation.background
+import androidx.compose.foundation.layout.Arrangement
 
 import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.Column
 import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxHeight
 import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.fillMaxWidth
 
 
 import androidx.compose.foundation.layout.padding
@@ -29,6 +32,7 @@
 import androidx.compose.material.TopAppBar
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.filled.Menu
+import androidx.compose.material.icons.filled.MoreVert
 
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.LaunchedEffect
@@ -43,6 +47,7 @@
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.res.painterResource
+import androidx.compose.ui.tooling.preview.Preview
 import androidx.compose.ui.unit.dp
 import androidx.lifecycle.LiveData
 import androidx.lifecycle.MutableLiveData
@@ -53,12 +58,13 @@
 import com.team3.wellness_buddy.ui.theme.Custom_Colors
 import kotlinx.coroutines.launch
 import androidx.navigation.NavController
+import androidx.navigation.compose.rememberNavController
 import com.google.firebase.database.DataSnapshot
 import com.google.firebase.database.DatabaseError
 import com.google.firebase.database.FirebaseDatabase
 import com.google.firebase.database.ValueEventListener
 import com.team3.wellness_buddy.UserPreferences
-
+import kotlin.math.log
 
 
 @SuppressLint("SuspiciousIndentation", "ResourceType")
@@ -74,6 +80,9 @@
     var selectedAge by remember { mutableStateOf(ages[0]) }
     var isDataLoaded by remember { mutableStateOf(false) } // Track whether data is loaded
 
+    var isMenuExpanded by remember { mutableStateOf(false) }
+
+
     fun fetchUserList() {
         val firebaseRef = FirebaseDatabase.getInstance().getReference("users")
         firebaseRef.addListenerForSingleValueEvent(object : ValueEventListener {
@@ -168,7 +177,9 @@
                 backgroundColor = Custom_Colors.Primary_bg,
                 contentColor = Color.White,
                 actions = {
-                    IconButton(onClick = { /* Handle left icon click */ }) {
+                    IconButton(onClick = { isMenuExpanded=true
+                    Log.d("isMenuClicked","menu button clicked")
+                    }) {
                         Icon(
                             Icons.Filled.Menu,
                             contentDescription = "Menu",
@@ -201,25 +212,83 @@
             }
         },
         floatingActionButtonPosition = FabPosition.Center,
+        drawerContent = {
+            // Side menu bar content
+//            if(isMenuExpanded){
+
+            Column(
+                modifier = Modifier
+                    .fillMaxHeight()
+                    .background(Color.White)
+                    .padding(16.dp)
+            ) {
+                // Add menu items here
+                // Example:
+                Text("Menu Item 1")
+                Text("Menu Item 2")
+            }
+//            }
+        }
 
         ) { innerPadding ->
-        FilterRow(categories, ages)
-        Log.d("UserList1",_userList.toString())
+
+        Column {
+//            Row(
+//                horizontalArrangement = Arrangement.End,
+//                modifier = Modifier
+//                    .fillMaxWidth()
+//                    .padding(horizontal = 16.dp)
+//            ) {
+//                IconButton(
+//                    onClick = { isMenuExpanded = true },
+//                    modifier = Modifier
+//                        .size(24.dp)
+//                        .padding(8.dp)
+//                ) {
+//                    Icon(Icons.Default.MoreVert, contentDescription = "Menu")
+//                }
+//            }
+//
+//            DropdownMenu(
+//                expanded = isMenuExpanded,
+//                onDismissRequest = { isMenuExpanded = false },
+//                modifier = Modifier.padding(end = 16.dp)
+//            ) {
+//                // Add items to the menu here
+//                // Example:
+//                DropdownMenuItem(onClick = {}) {
+//                    Text("Item 1")
+//                }
+//                DropdownMenuItem(onClick = {}) {
+//                    Text("Item 2")
+//                }
+//            }
+
+            FilterRow(categories, ages)
+            Log.d("UserList1", _userList.toString())
 
-        if (!isDataLoaded) {
-            Log.d("UserList1",_userList.toString())
+            if (!isDataLoaded) {
+                Log.d("UserList1", _userList.toString())
 
-            Box(
-                modifier = Modifier
-                    .fillMaxSize()
-                    .padding(innerPadding),
-                contentAlignment = Alignment.Center
-            ) {
-                CircularProgressIndicator()
-            }
-        } else {
-            _userList.value?.let { userList ->
-                UserListContent(userList = userList, paddingValues = innerPadding)
+                Box(
+                    modifier = Modifier
+                        .fillMaxSize()
+                        .padding(innerPadding),
+                    contentAlignment = Alignment.Center
+                ) {
+                    CircularProgressIndicator()
+                }
+            } else {
+                _userList.value?.let { userList ->
+                    UserListContent(userList = userList, paddingValues = innerPadding)
+                }
             }
         }
-    }}
\ No newline at end of file
+    }}
+
+@Preview(showBackground = true)
+@Composable
+fun ShowPage(){
+    UsersListPage(navController = rememberNavController()
+    )
+}
\ No newline at end of file
