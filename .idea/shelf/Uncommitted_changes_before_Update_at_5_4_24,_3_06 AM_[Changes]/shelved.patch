Index: app/src/main/java/com/team3/wellness_buddy/usersList/UsersListPage.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.team3.wellness_buddy.usersList\n\n\nimport android.annotation.SuppressLint\nimport android.util.Log\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\n\nimport androidx.compose.foundation.layout.Box\n\n\n\nimport androidx.compose.foundation.layout.Row\n\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\n\n\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\n\nimport androidx.compose.material.CircularProgressIndicator\nimport androidx.compose.material.DrawerValue\nimport androidx.compose.material.DropdownMenu\nimport androidx.compose.material.DropdownMenuItem\nimport androidx.compose.material.FabPosition\nimport androidx.compose.material.FloatingActionButton\nimport androidx.compose.material.FloatingActionButtonDefaults\nimport androidx.compose.material.Icon\nimport androidx.compose.material.IconButton\nimport androidx.compose.material.Scaffold\nimport androidx.compose.material.Text\nimport androidx.compose.material.TopAppBar\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Menu\nimport androidx.compose.material.rememberDrawerState\n\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\n\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.unit.dp\nimport androidx.lifecycle.MutableLiveData\nimport com.team3.wellness_buddy.R\nimport com.team3.wellness_buddy.helpers.getWindowStatusBarHeight\nimport com.team3.wellness_buddy.helpers.getWindowToolBarHeight\nimport com.team3.wellness_buddy.ui.theme.Custom_Colors\nimport kotlinx.coroutines.launch\nimport androidx.navigation.NavController\nimport com.google.firebase.database.DataSnapshot\nimport com.google.firebase.database.DatabaseError\nimport com.google.firebase.database.FirebaseDatabase\nimport com.google.firebase.database.ValueEventListener\nimport com.team3.wellness_buddy.UserPreferences\n\nval finalUserList = MutableLiveData<List<User>>()\n\n@SuppressLint(\"SuspiciousIndentation\", \"ResourceType\")\n\n@Composable\nfun UsersListPage(navController: NavController){\n    val coroutineScope = rememberCoroutineScope()\n    val context= LocalContext.current\n    val categories = listOf(\"ENT Specialist\", \"Orthopedic Specialist\", \"Gastroenterologist\", \"Dermatologist\", \"Neurologist\", \"Psychiatrist\")\n    val ages = listOf(\"<25\", \"<35\", \"<=45\", \">=45\")\n\n    val userList = mutableListOf<User>()\n    var selectedCategory by remember { mutableStateOf(categories[0]) }\n    var selectedAge by remember { mutableStateOf(ages[0]) }\n    var isDataLoaded by remember { mutableStateOf(false) } // Track whether data is loaded\n\n    var isMenuClicked by remember { mutableStateOf(false) }\n\n    val drawerState = rememberDrawerState(DrawerValue.Closed)\n\n    var firebaseRef = FirebaseDatabase.getInstance().getReference(\"users\")\n    firebaseRef.addListenerForSingleValueEvent(object : ValueEventListener {\n        override fun onDataChange(snapshot: DataSnapshot) {\n\n            for (userSnapshot in snapshot.children) {\n                val user = userSnapshot.getValue(User::class.java)\n                    user?.let {\n                        val selectedCategories = UserPreferences.getSelectedCategories(context);\n                        val role = UserPreferences.getUserRole(context);\n                        Log.d(\"UserList 12\", role.toString())\n                        val isCategoryExist =\n                            selectedCategories?.contains(it.category.toString()) == true;\n                        Log.d(\"Log Seeker\",it.role)\n                        if(role == \"Seeker\" && it.role != \"Seeker\"){\n                            if(selectedCategories != null && selectedCategories.isNotEmpty() &&\n                                isCategoryExist){\n                                userList.add(it)\n                            }\n                            else{\n                                userList.add(it)\n                            }\n\n                        }\n                        else if (role == \"Coach\" && it.role != \"Coach\"){\n                            userList.add(it)\n                        }\n                        else{\n\n                        }\n\n                    }\n                }\n                isDataLoaded = true\n                finalUserList.value = userList\n                Log.d(\"UserList\", finalUserList.value.toString())\n            }\n\n            override fun onCancelled(error: DatabaseError) {\n                // Handle error\n            }\n    })\n\n\n    @Composable\n    fun FilterRow(\n        categories: List<String>,\n        ages: List<String>\n\n    ) {\n\n        Row {\n            // Category dropdown\n            DropdownMenu(\n                expanded = false,\n                onDismissRequest = { /* Dismiss dropdown on outside click */ }\n            ) {\n                categories.forEach { category ->\n                    DropdownMenuItem(onClick = {\n                        selectedCategory = category\n                    }) {\n                        Text(text = category)\n                    }\n                }\n            }\n\n            // Age dropdown\n            DropdownMenu(\n                expanded = false,\n                onDismissRequest = { /* Dismiss dropdown on outside click */ }\n            ) {\n                ages.forEach { age ->\n                    DropdownMenuItem(onClick = {\n                        selectedAge = age\n                    }) {\n                        Text(text = age)\n                    }\n                }\n            }\n        }\n    }\n\n\n    Scaffold(\n        modifier = Modifier\n            .padding(\n                top = getWindowStatusBarHeight(),\n                bottom = getWindowToolBarHeight() + 10.dp\n            ),\n\n        topBar = {\n            TopAppBar(\n                {\n                    Box(\n                        modifier = Modifier\n                            .background(Color.Transparent)\n                    ) {\n                        val firstName = UserPreferences.getFirstName(context)\n                        val lastName = UserPreferences.getLastName(context)\n\n                        val displayName = if (firstName.isNullOrBlank() && lastName.isNullOrBlank()) {\n                            \"Wellness Buddy\"\n                        } else {\n                            \"${firstName.orEmpty()} ${lastName.orEmpty()}\"\n                        }\n\n                        Text(text = displayName)\n                    }\n                },\n                backgroundColor = Custom_Colors.Primary_bg,\n                contentColor = Color.White,\n                actions = {\n                    IconButton(onClick = {\n                        isMenuClicked=!isMenuClicked\n                        Log.d(\"IsMenuClicked\",\"$isMenuClicked\")\n                    }) {\n                        Icon(\n                            Icons.Filled.Menu,\n                            contentDescription = \"Menu\",\n                            tint = Color.White\n                        )\n                    }\n                },\n\n\n                )\n        },\n\n        floatingActionButton = {\n            val userEmail=UserPreferences.getEmail(context)\n            FloatingActionButton(\n                onClick = {\n                    coroutineScope.launch {\n                        navController.navigate(\"login\")\n                    }\n                },\n                modifier = Modifier\n                    .size(50.dp),\n                backgroundColor = Color.Black, // Set your desired FAB background color // Set your desired FAB content color\n                elevation = FloatingActionButtonDefaults.elevation(defaultElevation = 8.dp),\n            ) {\n                if (userEmail != null) {\n                    ProfilePicture(email = userEmail, sizeDp = 50.dp.value.toInt())\n                }\n//                Image(\n//                    modifier = Modifier.fillMaxSize(),\n//                    painter = painterResource(id = R.raw.user), contentDescription =\"user\" )\n            }\n        },\n        floatingActionButtonPosition = FabPosition.Center,\n\n\n\n\n        )\n    { innerPadding ->\n\n\n        Log.d(\"User email\",\"\"+UserPreferences.getEmail(context))\n\n        if(isMenuClicked){\n\n            Box(modifier = Modifier\n                .fillMaxWidth()\n                .background(Color.Black),\n                contentAlignment = Alignment.TopEnd\n\n            ) {\n                DropdownMenu(expanded = true, onDismissRequest = { isMenuClicked = false },\n                    modifier=Modifier.fillMaxWidth()) {\n                    DropdownMenuItem(onClick = {\n                        navController.navigate(\"about\")\n                    }, modifier = Modifier) {\n                        Text(text = \"About\")\n                    }\n                    DropdownMenuItem(onClick = {\n\n                    }) {\n                        Text(text = \"Profile\")\n                    }\n                    DropdownMenuItem(onClick = {\n                        UserPreferences.saveSelectedCategories(emptySet(), context)\n                        UserPreferences.saveUserInfo(context,\"\",\"\",\"\",\"\")\n                        navController.navigate(\"login\")\n                    }) {\n                        Text(text = \"Logout\")\n                    }\n\n                }\n\n            }\n        }\n\n        FilterRow(categories, ages)\n        Log.d(\"UserList1\",finalUserList.toString())\n\n        if (!isDataLoaded) {\n            Log.d(\"UserList1\",finalUserList.toString())\n\n            Box(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .padding(innerPadding),\n                contentAlignment = Alignment.Center\n            ) {\n                CircularProgressIndicator()\n            }\n        } else {\n            finalUserList.value?.let { userList ->\n                UserListContent(userList = userList, paddingValues = innerPadding)\n            }\n\n\n        }\n\n\n\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/team3/wellness_buddy/usersList/UsersListPage.kt b/app/src/main/java/com/team3/wellness_buddy/usersList/UsersListPage.kt
--- a/app/src/main/java/com/team3/wellness_buddy/usersList/UsersListPage.kt	(revision b06208cd4a7e9b5689a0f1873a4ee23f4d66f43d)
+++ b/app/src/main/java/com/team3/wellness_buddy/usersList/UsersListPage.kt	(date 1714805507343)
@@ -221,7 +221,8 @@
                 backgroundColor = Color.Black, // Set your desired FAB background color // Set your desired FAB content color
                 elevation = FloatingActionButtonDefaults.elevation(defaultElevation = 8.dp),
             ) {
-                if (userEmail != null) {
+                if (userEmail != null)
+                {
                     ProfilePicture(email = userEmail, sizeDp = 50.dp.value.toInt())
                 }
 //                Image(
